name: face_detection
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

version: 1.0.0+1

environment:
  sdk: ^3.5.3

dependencies:
  flutter:
    sdk: flutter

  cupertino_icons: ^1.0.8
  camera: ^0.11.0+2
  # google_ml_kit: ^0.19.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
# **Improving Development Processes**
# To improve our development processes, we can:
# 1. **Enhance Collaboration**: Regular team discussions and planning meetings can help everyone stay aligned and identify potential roadblocks early.
# 2. **Adopt Best Practices**: Following industry standards for coding, testing, and version control can streamline the workflow.
# 3. **Leverage Automation**: Automating repetitive tasks like testing, builds, and deployments can save time and reduce errors.

# **Challenges in Delivering Features**
# 1. **Requirement Clarity**: Sometimes, unclear or incomplete requirements make it harder to deliver features efficiently.
# 2. **Dependencies**: Waiting on designs, feedback, or updates from other teams can slow us down.
# 3. **Legacy Code**: Working around older code that wasn’t designed with current needs in mind can take extra time.

# **Code Review Practices**
# 1. **Strengths**: Code reviews are effective for maintaining code quality and catching errors.
# 2. **Improvements**: Faster response times and more detailed feedback can make reviews more efficient.

# **Suggestions**
# 1. **Define Expectations**: Clear documentation of processes, standards, and goals can help reduce misunderstandings.
# 2. **Improve Communication**: Open communication about priorities and challenges can help the team work more effectively together.
# 3. **Retrospectives**: Regularly review what’s working and what’s not in our workflow to continuously improve.

# Improving Development Processes
#  To enhance our development processes, I believe we can:
# Standardize Coding Practices: Adopting a clear set of guidelines for Flutter, such as naming conventions, widget structuring, and state management patterns, can reduce misunderstandings and make the code more consistent and easier to maintain.
# Automate Testing: Introducing more unit, widget, and integration tests, as well as automated testing pipelines, can help catch issues earlier in the development process.
# Project Planning: Having detailed discussions about feature requirements and timelines at the start of each sprint can ensure everyone is aligned and help minimize rework.
# Challenges Slowing Down Feature Delivery
# Ambiguity in Requirements: Sometimes, unclear or changing requirements can lead to delays as we need to revisit and refine the implementation.
# Tech Debt: Older parts of the project or legacy code can slow down feature delivery, as it takes more time to adapt to new features without introducing bugs.
# Dependencies and Approvals: Waiting for backend changes, design feedback, or code reviews can create bottlenecks.
# Current Code Review Practices
#  Code reviews are vital for ensuring quality, but there is always room for improvement:
# Clarity of Feedback: It would be helpful if feedback is more specific, including suggestions or examples, especially for complex Flutter patterns.
# Timeliness: Prompt reviews can reduce idle time and help developers proceed more efficiently.
# Focus on Learning: Reviews should emphasize collaboration and learning opportunities rather than just pointing out errors. Pair programming sessions could also be integrated occasionally to supplement this.
# Suggestions for Improvement
# Pre-merge Checklists: Implement a pre-merge checklist for Flutter-specific aspects like widget tree optimization, accessibility, and responsiveness.
# Tools: Use tools like linters (e.g., flutter analyze) and formatters to catch common issues before the review phase.
# Retrospectives: Periodically discuss what’s working and what’s not in our review practices as a team and adapt accordingly.
